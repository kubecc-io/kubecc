// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConsumerdClient is the client API for Consumerd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumerdClient interface {
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error)
}

type consumerdClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumerdClient(cc grpc.ClientConnInterface) ConsumerdClient {
	return &consumerdClient{cc}
}

func (c *consumerdClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, "/types.Consumerd/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumerdServer is the server API for Consumerd service.
// All implementations must embed UnimplementedConsumerdServer
// for forward compatibility
type ConsumerdServer interface {
	Run(context.Context, *RunRequest) (*RunResponse, error)
	mustEmbedUnimplementedConsumerdServer()
}

// UnimplementedConsumerdServer must be embedded to have forward compatible implementations.
type UnimplementedConsumerdServer struct {
}

func (UnimplementedConsumerdServer) Run(context.Context, *RunRequest) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedConsumerdServer) mustEmbedUnimplementedConsumerdServer() {}

// UnsafeConsumerdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumerdServer will
// result in compilation errors.
type UnsafeConsumerdServer interface {
	mustEmbedUnimplementedConsumerdServer()
}

func RegisterConsumerdServer(s grpc.ServiceRegistrar, srv ConsumerdServer) {
	s.RegisterService(&Consumerd_ServiceDesc, srv)
}

func _Consumerd_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerdServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Consumerd/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerdServer).Run(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Consumerd_ServiceDesc is the grpc.ServiceDesc for Consumerd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Consumerd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "types.Consumerd",
	HandlerType: (*ConsumerdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Consumerd_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/types/types.proto",
}

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerClient interface {
	Compile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (*CompileResponse, error)
	StreamIncomingTasks(ctx context.Context, opts ...grpc.CallOption) (Scheduler_StreamIncomingTasksClient, error)
	StreamOutgoingTasks(ctx context.Context, opts ...grpc.CallOption) (Scheduler_StreamOutgoingTasksClient, error)
	GetRoutes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RouteList, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) Compile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (*CompileResponse, error) {
	out := new(CompileResponse)
	err := c.cc.Invoke(ctx, "/types.Scheduler/Compile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) StreamIncomingTasks(ctx context.Context, opts ...grpc.CallOption) (Scheduler_StreamIncomingTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Scheduler_ServiceDesc.Streams[0], "/types.Scheduler/StreamIncomingTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerStreamIncomingTasksClient{stream}
	return x, nil
}

type Scheduler_StreamIncomingTasksClient interface {
	Send(*CompileResponse) error
	Recv() (*CompileRequest, error)
	grpc.ClientStream
}

type schedulerStreamIncomingTasksClient struct {
	grpc.ClientStream
}

func (x *schedulerStreamIncomingTasksClient) Send(m *CompileResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *schedulerStreamIncomingTasksClient) Recv() (*CompileRequest, error) {
	m := new(CompileRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schedulerClient) StreamOutgoingTasks(ctx context.Context, opts ...grpc.CallOption) (Scheduler_StreamOutgoingTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Scheduler_ServiceDesc.Streams[1], "/types.Scheduler/StreamOutgoingTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerStreamOutgoingTasksClient{stream}
	return x, nil
}

type Scheduler_StreamOutgoingTasksClient interface {
	Send(*CompileRequest) error
	Recv() (*CompileResponse, error)
	grpc.ClientStream
}

type schedulerStreamOutgoingTasksClient struct {
	grpc.ClientStream
}

func (x *schedulerStreamOutgoingTasksClient) Send(m *CompileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *schedulerStreamOutgoingTasksClient) Recv() (*CompileResponse, error) {
	m := new(CompileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schedulerClient) GetRoutes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RouteList, error) {
	out := new(RouteList)
	err := c.cc.Invoke(ctx, "/types.Scheduler/GetRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
// All implementations must embed UnimplementedSchedulerServer
// for forward compatibility
type SchedulerServer interface {
	Compile(context.Context, *CompileRequest) (*CompileResponse, error)
	StreamIncomingTasks(Scheduler_StreamIncomingTasksServer) error
	StreamOutgoingTasks(Scheduler_StreamOutgoingTasksServer) error
	GetRoutes(context.Context, *Empty) (*RouteList, error)
	mustEmbedUnimplementedSchedulerServer()
}

// UnimplementedSchedulerServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (UnimplementedSchedulerServer) Compile(context.Context, *CompileRequest) (*CompileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compile not implemented")
}
func (UnimplementedSchedulerServer) StreamIncomingTasks(Scheduler_StreamIncomingTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamIncomingTasks not implemented")
}
func (UnimplementedSchedulerServer) StreamOutgoingTasks(Scheduler_StreamOutgoingTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOutgoingTasks not implemented")
}
func (UnimplementedSchedulerServer) GetRoutes(context.Context, *Empty) (*RouteList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoutes not implemented")
}
func (UnimplementedSchedulerServer) mustEmbedUnimplementedSchedulerServer() {}

// UnsafeSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServer will
// result in compilation errors.
type UnsafeSchedulerServer interface {
	mustEmbedUnimplementedSchedulerServer()
}

func RegisterSchedulerServer(s grpc.ServiceRegistrar, srv SchedulerServer) {
	s.RegisterService(&Scheduler_ServiceDesc, srv)
}

func _Scheduler_Compile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Compile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Scheduler/Compile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Compile(ctx, req.(*CompileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_StreamIncomingTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SchedulerServer).StreamIncomingTasks(&schedulerStreamIncomingTasksServer{stream})
}

type Scheduler_StreamIncomingTasksServer interface {
	Send(*CompileRequest) error
	Recv() (*CompileResponse, error)
	grpc.ServerStream
}

type schedulerStreamIncomingTasksServer struct {
	grpc.ServerStream
}

func (x *schedulerStreamIncomingTasksServer) Send(m *CompileRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *schedulerStreamIncomingTasksServer) Recv() (*CompileResponse, error) {
	m := new(CompileResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Scheduler_StreamOutgoingTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SchedulerServer).StreamOutgoingTasks(&schedulerStreamOutgoingTasksServer{stream})
}

type Scheduler_StreamOutgoingTasksServer interface {
	Send(*CompileResponse) error
	Recv() (*CompileRequest, error)
	grpc.ServerStream
}

type schedulerStreamOutgoingTasksServer struct {
	grpc.ServerStream
}

func (x *schedulerStreamOutgoingTasksServer) Send(m *CompileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *schedulerStreamOutgoingTasksServer) Recv() (*CompileRequest, error) {
	m := new(CompileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Scheduler_GetRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Scheduler/GetRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetRoutes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Scheduler_ServiceDesc is the grpc.ServiceDesc for Scheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "types.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compile",
			Handler:    _Scheduler_Compile_Handler,
		},
		{
			MethodName: "GetRoutes",
			Handler:    _Scheduler_GetRoutes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamIncomingTasks",
			Handler:       _Scheduler_StreamIncomingTasks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamOutgoingTasks",
			Handler:       _Scheduler_StreamOutgoingTasks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/types/types.proto",
}

// MonitorClient is the client API for Monitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitorClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (Monitor_StreamClient, error)
	GetMetric(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Metric, error)
	GetBuckets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BucketList, error)
	GetKeys(ctx context.Context, in *Bucket, opts ...grpc.CallOption) (*KeyList, error)
	Listen(ctx context.Context, in *Key, opts ...grpc.CallOption) (Monitor_ListenClient, error)
	Whois(ctx context.Context, in *WhoisRequest, opts ...grpc.CallOption) (*WhoisResponse, error)
}

type monitorClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitorClient(cc grpc.ClientConnInterface) MonitorClient {
	return &monitorClient{cc}
}

func (c *monitorClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Monitor_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Monitor_ServiceDesc.Streams[0], "/types.Monitor/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitorStreamClient{stream}
	return x, nil
}

type Monitor_StreamClient interface {
	Send(*Metric) error
	Recv() (*Empty, error)
	grpc.ClientStream
}

type monitorStreamClient struct {
	grpc.ClientStream
}

func (x *monitorStreamClient) Send(m *Metric) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monitorStreamClient) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitorClient) GetMetric(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Metric, error) {
	out := new(Metric)
	err := c.cc.Invoke(ctx, "/types.Monitor/GetMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) GetBuckets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BucketList, error) {
	out := new(BucketList)
	err := c.cc.Invoke(ctx, "/types.Monitor/GetBuckets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) GetKeys(ctx context.Context, in *Bucket, opts ...grpc.CallOption) (*KeyList, error) {
	out := new(KeyList)
	err := c.cc.Invoke(ctx, "/types.Monitor/GetKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) Listen(ctx context.Context, in *Key, opts ...grpc.CallOption) (Monitor_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &Monitor_ServiceDesc.Streams[1], "/types.Monitor/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitorListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Monitor_ListenClient interface {
	Recv() (*any.Any, error)
	grpc.ClientStream
}

type monitorListenClient struct {
	grpc.ClientStream
}

func (x *monitorListenClient) Recv() (*any.Any, error) {
	m := new(any.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitorClient) Whois(ctx context.Context, in *WhoisRequest, opts ...grpc.CallOption) (*WhoisResponse, error) {
	out := new(WhoisResponse)
	err := c.cc.Invoke(ctx, "/types.Monitor/Whois", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitorServer is the server API for Monitor service.
// All implementations must embed UnimplementedMonitorServer
// for forward compatibility
type MonitorServer interface {
	Stream(Monitor_StreamServer) error
	GetMetric(context.Context, *Key) (*Metric, error)
	GetBuckets(context.Context, *Empty) (*BucketList, error)
	GetKeys(context.Context, *Bucket) (*KeyList, error)
	Listen(*Key, Monitor_ListenServer) error
	Whois(context.Context, *WhoisRequest) (*WhoisResponse, error)
	mustEmbedUnimplementedMonitorServer()
}

// UnimplementedMonitorServer must be embedded to have forward compatible implementations.
type UnimplementedMonitorServer struct {
}

func (UnimplementedMonitorServer) Stream(Monitor_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedMonitorServer) GetMetric(context.Context, *Key) (*Metric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetric not implemented")
}
func (UnimplementedMonitorServer) GetBuckets(context.Context, *Empty) (*BucketList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuckets not implemented")
}
func (UnimplementedMonitorServer) GetKeys(context.Context, *Bucket) (*KeyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeys not implemented")
}
func (UnimplementedMonitorServer) Listen(*Key, Monitor_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedMonitorServer) Whois(context.Context, *WhoisRequest) (*WhoisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whois not implemented")
}
func (UnimplementedMonitorServer) mustEmbedUnimplementedMonitorServer() {}

// UnsafeMonitorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitorServer will
// result in compilation errors.
type UnsafeMonitorServer interface {
	mustEmbedUnimplementedMonitorServer()
}

func RegisterMonitorServer(s grpc.ServiceRegistrar, srv MonitorServer) {
	s.RegisterService(&Monitor_ServiceDesc, srv)
}

func _Monitor_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitorServer).Stream(&monitorStreamServer{stream})
}

type Monitor_StreamServer interface {
	Send(*Empty) error
	Recv() (*Metric, error)
	grpc.ServerStream
}

type monitorStreamServer struct {
	grpc.ServerStream
}

func (x *monitorStreamServer) Send(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monitorStreamServer) Recv() (*Metric, error) {
	m := new(Metric)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Monitor_GetMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServer).GetMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Monitor/GetMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServer).GetMetric(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monitor_GetBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServer).GetBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Monitor/GetBuckets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServer).GetBuckets(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monitor_GetKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServer).GetKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Monitor/GetKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServer).GetKeys(ctx, req.(*Bucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monitor_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Key)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitorServer).Listen(m, &monitorListenServer{stream})
}

type Monitor_ListenServer interface {
	Send(*any.Any) error
	grpc.ServerStream
}

type monitorListenServer struct {
	grpc.ServerStream
}

func (x *monitorListenServer) Send(m *any.Any) error {
	return x.ServerStream.SendMsg(m)
}

func _Monitor_Whois_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServer).Whois(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Monitor/Whois",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServer).Whois(ctx, req.(*WhoisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Monitor_ServiceDesc is the grpc.ServiceDesc for Monitor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Monitor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "types.Monitor",
	HandlerType: (*MonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetric",
			Handler:    _Monitor_GetMetric_Handler,
		},
		{
			MethodName: "GetBuckets",
			Handler:    _Monitor_GetBuckets_Handler,
		},
		{
			MethodName: "GetKeys",
			Handler:    _Monitor_GetKeys_Handler,
		},
		{
			MethodName: "Whois",
			Handler:    _Monitor_Whois_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Monitor_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _Monitor_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/types/types.proto",
}

// CacheClient is the client API for Cache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheClient interface {
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*Empty, error)
	Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*CacheObject, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (Cache_SyncClient, error)
}

type cacheClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheClient(cc grpc.ClientConnInterface) CacheClient {
	return &cacheClient{cc}
}

func (c *cacheClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/types.Cache/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*CacheObject, error) {
	out := new(CacheObject)
	err := c.cc.Invoke(ctx, "/types.Cache/Pull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/types.Cache/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (Cache_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cache_ServiceDesc.Streams[0], "/types.Cache/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cache_SyncClient interface {
	Recv() (*CacheObject, error)
	grpc.ClientStream
}

type cacheSyncClient struct {
	grpc.ClientStream
}

func (x *cacheSyncClient) Recv() (*CacheObject, error) {
	m := new(CacheObject)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CacheServer is the server API for Cache service.
// All implementations must embed UnimplementedCacheServer
// for forward compatibility
type CacheServer interface {
	Push(context.Context, *PushRequest) (*Empty, error)
	Pull(context.Context, *PullRequest) (*CacheObject, error)
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	Sync(*SyncRequest, Cache_SyncServer) error
	mustEmbedUnimplementedCacheServer()
}

// UnimplementedCacheServer must be embedded to have forward compatible implementations.
type UnimplementedCacheServer struct {
}

func (UnimplementedCacheServer) Push(context.Context, *PushRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedCacheServer) Pull(context.Context, *PullRequest) (*CacheObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedCacheServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedCacheServer) Sync(*SyncRequest, Cache_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedCacheServer) mustEmbedUnimplementedCacheServer() {}

// UnsafeCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheServer will
// result in compilation errors.
type UnsafeCacheServer interface {
	mustEmbedUnimplementedCacheServer()
}

func RegisterCacheServer(s grpc.ServiceRegistrar, srv CacheServer) {
	s.RegisterService(&Cache_ServiceDesc, srv)
}

func _Cache_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Cache/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Cache/Pull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Pull(ctx, req.(*PullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Cache/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacheServer).Sync(m, &cacheSyncServer{stream})
}

type Cache_SyncServer interface {
	Send(*CacheObject) error
	grpc.ServerStream
}

type cacheSyncServer struct {
	grpc.ServerStream
}

func (x *cacheSyncServer) Send(m *CacheObject) error {
	return x.ServerStream.SendMsg(m)
}

// Cache_ServiceDesc is the grpc.ServiceDesc for Cache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "types.Cache",
	HandlerType: (*CacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Cache_Push_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _Cache_Pull_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Cache_Query_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _Cache_Sync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/types/types.proto",
}
