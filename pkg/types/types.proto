syntax = "proto3";

option go_package = "proto;types";

message Empty {}

// Consumer

service Consumer {
  rpc Run(DispatchRequest) returns (Empty);
}

// Consumer (follower) -> Consumer (leader)
message DispatchRequest {
  string WorkDir = 1;
  string Command = 2;
  repeated string Args = 3;
  repeated string Env = 4;
}

// Agent and scheduler

service Agent {
  rpc Compile(CompileRequest) returns (stream CompileStatus);
}

service Scheduler {
  rpc Schedule(ScheduleRequest) returns (ScheduleResponse);
  rpc Compile(CompileRequest) returns (CompileResponse);
  rpc Connect(stream Empty) returns (stream Empty);
}

// Consumer -> Scheduler
message ScheduleRequest {}

// Scheduler -> Consumer
message ScheduleResponse {}


message AgentInfo {
  // System Info
  string Arch = 1;
  int32 NumCpus = 2;

  // Downward API
  string Node = 3;
  string Pod = 4;
  string Namespace = 5;
}

// Scheduler -> Agent
message CompileRequest {
  string Command = 2;
  repeated string Args = 3;
  bytes PreprocessedSource = 4;
}

// Agent -> Scheduler
message CompileStatus {
  enum Status {
    Accept = 0;
    Reject = 1;
    Success = 2;
    Fail = 3;
  }
  Status CompileStatus = 1;
  oneof Data {
    AgentInfo Info = 2;
    string Error = 3;
    bytes CompiledSource = 4;
  }
}

// Scheduler -> Consumer
message CompileResponse {
  enum Result {
    Success = 0;
    Fail = 1;
  }
  Result CompileResult = 1;
  oneof Data {
    string Error = 3;
    bytes CompiledSource = 4;
  }
}
