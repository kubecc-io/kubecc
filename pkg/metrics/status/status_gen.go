package status

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *QueueParams) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "maxRunningProcesses":
			z.MaxRunningProcesses, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "MaxRunningProcesses")
				return
			}
		case "queuePressureThreshold":
			z.QueuePressureThreshold, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "QueuePressureThreshold")
				return
			}
		case "queueRejectThreshold":
			z.QueueRejectThreshold, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "QueueRejectThreshold")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z QueueParams) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "maxRunningProcesses"
	err = en.Append(0x83, 0xb3, 0x6d, 0x61, 0x78, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.MaxRunningProcesses)
	if err != nil {
		err = msgp.WrapError(err, "MaxRunningProcesses")
		return
	}
	// write "queuePressureThreshold"
	err = en.Append(0xb6, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.QueuePressureThreshold)
	if err != nil {
		err = msgp.WrapError(err, "QueuePressureThreshold")
		return
	}
	// write "queueRejectThreshold"
	err = en.Append(0xb4, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.QueueRejectThreshold)
	if err != nil {
		err = msgp.WrapError(err, "QueueRejectThreshold")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z QueueParams) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "maxRunningProcesses"
	o = append(o, 0x83, 0xb3, 0x6d, 0x61, 0x78, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73)
	o = msgp.AppendInt32(o, z.MaxRunningProcesses)
	// string "queuePressureThreshold"
	o = append(o, 0xb6, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64)
	o = msgp.AppendFloat64(o, z.QueuePressureThreshold)
	// string "queueRejectThreshold"
	o = append(o, 0xb4, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64)
	o = msgp.AppendFloat64(o, z.QueueRejectThreshold)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *QueueParams) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "maxRunningProcesses":
			z.MaxRunningProcesses, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxRunningProcesses")
				return
			}
		case "queuePressureThreshold":
			z.QueuePressureThreshold, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "QueuePressureThreshold")
				return
			}
		case "queueRejectThreshold":
			z.QueueRejectThreshold, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "QueueRejectThreshold")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z QueueParams) Msgsize() (s int) {
	s = 1 + 20 + msgp.Int32Size + 23 + msgp.Float64Size + 21 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *QueueStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "queueStatus":
			z.QueueStatus, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "QueueStatus")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z QueueStatus) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "queueStatus"
	err = en.Append(0x81, 0xab, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.QueueStatus)
	if err != nil {
		err = msgp.WrapError(err, "QueueStatus")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z QueueStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "queueStatus"
	o = append(o, 0x81, 0xab, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendInt32(o, z.QueueStatus)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *QueueStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "queueStatus":
			z.QueueStatus, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "QueueStatus")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z QueueStatus) Msgsize() (s int) {
	s = 1 + 12 + msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TaskStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "numRunningProcesses":
			z.NumRunningProcesses, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "NumRunningProcesses")
				return
			}
		case "numQueuedProcesses":
			z.NumQueuedProcesses, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "NumQueuedProcesses")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TaskStatus) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "numRunningProcesses"
	err = en.Append(0x82, 0xb3, 0x6e, 0x75, 0x6d, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.NumRunningProcesses)
	if err != nil {
		err = msgp.WrapError(err, "NumRunningProcesses")
		return
	}
	// write "numQueuedProcesses"
	err = en.Append(0xb2, 0x6e, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.NumQueuedProcesses)
	if err != nil {
		err = msgp.WrapError(err, "NumQueuedProcesses")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TaskStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "numRunningProcesses"
	o = append(o, 0x82, 0xb3, 0x6e, 0x75, 0x6d, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73)
	o = msgp.AppendInt32(o, z.NumRunningProcesses)
	// string "numQueuedProcesses"
	o = append(o, 0xb2, 0x6e, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73)
	o = msgp.AppendInt32(o, z.NumQueuedProcesses)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TaskStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "numRunningProcesses":
			z.NumRunningProcesses, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NumRunningProcesses")
				return
			}
		case "numQueuedProcesses":
			z.NumQueuedProcesses, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NumQueuedProcesses")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TaskStatus) Msgsize() (s int) {
	s = 1 + 20 + msgp.Int32Size + 19 + msgp.Int32Size
	return
}
