package common

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Alive) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "component":
			z.Component, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Component")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Alive) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "component"
	err = en.Append(0x81, 0xa9, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Component)
	if err != nil {
		err = msgp.WrapError(err, "Component")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Alive) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "component"
	o = append(o, 0x81, 0xa9, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74)
	o = msgp.AppendInt32(o, z.Component)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Alive) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "component":
			z.Component, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Component")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Alive) Msgsize() (s int) {
	s = 1 + 10 + msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *QueueParams) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "concurrentProcessLimit":
			z.ConcurrentProcessLimit, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "ConcurrentProcessLimit")
				return
			}
		case "queuePressureMultiplier":
			z.QueuePressureMultiplier, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "QueuePressureMultiplier")
				return
			}
		case "queueRejectMultiplier":
			z.QueueRejectMultiplier, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "QueueRejectMultiplier")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z QueueParams) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "concurrentProcessLimit"
	err = en.Append(0x83, 0xb6, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.ConcurrentProcessLimit)
	if err != nil {
		err = msgp.WrapError(err, "ConcurrentProcessLimit")
		return
	}
	// write "queuePressureMultiplier"
	err = en.Append(0xb7, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.QueuePressureMultiplier)
	if err != nil {
		err = msgp.WrapError(err, "QueuePressureMultiplier")
		return
	}
	// write "queueRejectMultiplier"
	err = en.Append(0xb5, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.QueueRejectMultiplier)
	if err != nil {
		err = msgp.WrapError(err, "QueueRejectMultiplier")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z QueueParams) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "concurrentProcessLimit"
	o = append(o, 0x83, 0xb6, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	o = msgp.AppendInt32(o, z.ConcurrentProcessLimit)
	// string "queuePressureMultiplier"
	o = append(o, 0xb7, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72)
	o = msgp.AppendFloat64(o, z.QueuePressureMultiplier)
	// string "queueRejectMultiplier"
	o = append(o, 0xb5, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72)
	o = msgp.AppendFloat64(o, z.QueueRejectMultiplier)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *QueueParams) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "concurrentProcessLimit":
			z.ConcurrentProcessLimit, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConcurrentProcessLimit")
				return
			}
		case "queuePressureMultiplier":
			z.QueuePressureMultiplier, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "QueuePressureMultiplier")
				return
			}
		case "queueRejectMultiplier":
			z.QueueRejectMultiplier, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "QueueRejectMultiplier")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z QueueParams) Msgsize() (s int) {
	s = 1 + 23 + msgp.Int32Size + 24 + msgp.Float64Size + 22 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *QueueStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "queueStatus":
			z.QueueStatus, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "QueueStatus")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z QueueStatus) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "queueStatus"
	err = en.Append(0x81, 0xab, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.QueueStatus)
	if err != nil {
		err = msgp.WrapError(err, "QueueStatus")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z QueueStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "queueStatus"
	o = append(o, 0x81, 0xab, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendInt32(o, z.QueueStatus)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *QueueStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "queueStatus":
			z.QueueStatus, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "QueueStatus")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z QueueStatus) Msgsize() (s int) {
	s = 1 + 12 + msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TaskStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "numRunning":
			z.NumRunning, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "NumRunning")
				return
			}
		case "numQueued":
			z.NumQueued, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "NumQueued")
				return
			}
		case "numDelegated":
			z.NumDelegated, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "NumDelegated")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TaskStatus) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "numRunning"
	err = en.Append(0x83, 0xaa, 0x6e, 0x75, 0x6d, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.NumRunning)
	if err != nil {
		err = msgp.WrapError(err, "NumRunning")
		return
	}
	// write "numQueued"
	err = en.Append(0xa9, 0x6e, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.NumQueued)
	if err != nil {
		err = msgp.WrapError(err, "NumQueued")
		return
	}
	// write "numDelegated"
	err = en.Append(0xac, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.NumDelegated)
	if err != nil {
		err = msgp.WrapError(err, "NumDelegated")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TaskStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "numRunning"
	o = append(o, 0x83, 0xaa, 0x6e, 0x75, 0x6d, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67)
	o = msgp.AppendInt32(o, z.NumRunning)
	// string "numQueued"
	o = append(o, 0xa9, 0x6e, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64)
	o = msgp.AppendInt32(o, z.NumQueued)
	// string "numDelegated"
	o = append(o, 0xac, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64)
	o = msgp.AppendInt32(o, z.NumDelegated)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TaskStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "numRunning":
			z.NumRunning, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NumRunning")
				return
			}
		case "numQueued":
			z.NumQueued, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NumQueued")
				return
			}
		case "numDelegated":
			z.NumDelegated, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NumDelegated")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TaskStatus) Msgsize() (s int) {
	s = 1 + 11 + msgp.Int32Size + 10 + msgp.Int32Size + 13 + msgp.Int32Size
	return
}
