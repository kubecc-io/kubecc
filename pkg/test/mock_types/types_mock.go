// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/types/types.pb.go

// Package mock_types is a generated GoMock package.
package mock_types

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockisRunRequest_Compiler is a mock of isRunRequest_Compiler interface.
type MockisRunRequest_Compiler struct {
	ctrl     *gomock.Controller
	recorder *MockisRunRequest_CompilerMockRecorder
}

// MockisRunRequest_CompilerMockRecorder is the mock recorder for MockisRunRequest_Compiler.
type MockisRunRequest_CompilerMockRecorder struct {
	mock *MockisRunRequest_Compiler
}

// NewMockisRunRequest_Compiler creates a new mock instance.
func NewMockisRunRequest_Compiler(ctrl *gomock.Controller) *MockisRunRequest_Compiler {
	mock := &MockisRunRequest_Compiler{ctrl: ctrl}
	mock.recorder = &MockisRunRequest_CompilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisRunRequest_Compiler) EXPECT() *MockisRunRequest_CompilerMockRecorder {
	return m.recorder
}

// isRunRequest_Compiler mocks base method.
func (m *MockisRunRequest_Compiler) isRunRequest_Compiler() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isRunRequest_Compiler")
}

// isRunRequest_Compiler indicates an expected call of isRunRequest_Compiler.
func (mr *MockisRunRequest_CompilerMockRecorder) isRunRequest_Compiler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isRunRequest_Compiler", reflect.TypeOf((*MockisRunRequest_Compiler)(nil).isRunRequest_Compiler))
}

// MockisCompileResponse_Data is a mock of isCompileResponse_Data interface.
type MockisCompileResponse_Data struct {
	ctrl     *gomock.Controller
	recorder *MockisCompileResponse_DataMockRecorder
}

// MockisCompileResponse_DataMockRecorder is the mock recorder for MockisCompileResponse_Data.
type MockisCompileResponse_DataMockRecorder struct {
	mock *MockisCompileResponse_Data
}

// NewMockisCompileResponse_Data creates a new mock instance.
func NewMockisCompileResponse_Data(ctrl *gomock.Controller) *MockisCompileResponse_Data {
	mock := &MockisCompileResponse_Data{ctrl: ctrl}
	mock.recorder = &MockisCompileResponse_DataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisCompileResponse_Data) EXPECT() *MockisCompileResponse_DataMockRecorder {
	return m.recorder
}

// isCompileResponse_Data mocks base method.
func (m *MockisCompileResponse_Data) isCompileResponse_Data() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isCompileResponse_Data")
}

// isCompileResponse_Data indicates an expected call of isCompileResponse_Data.
func (mr *MockisCompileResponse_DataMockRecorder) isCompileResponse_Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCompileResponse_Data", reflect.TypeOf((*MockisCompileResponse_Data)(nil).isCompileResponse_Data))
}
