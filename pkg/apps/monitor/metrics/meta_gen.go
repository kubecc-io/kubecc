package metrics

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BucketSpec) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "data":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
			if z.Data == nil {
				z.Data = make(map[string][]byte, zb0002)
			} else if len(z.Data) > 0 {
				for key := range z.Data {
					delete(z.Data, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 []byte
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Data")
					return
				}
				za0002, err = dc.ReadBytes(za0002)
				if err != nil {
					err = msgp.WrapError(err, "Data", za0001)
					return
				}
				z.Data[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BucketSpec) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "name"
	err = en.Append(0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "data"
	err = en.Append(0xa4, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Data)))
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	for za0001, za0002 := range z.Data {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Data")
			return
		}
		err = en.WriteBytes(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Data", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BucketSpec) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "name"
	o = append(o, 0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "data"
	o = append(o, 0xa4, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendMapHeader(o, uint32(len(z.Data)))
	for za0001, za0002 := range z.Data {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendBytes(o, za0002)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BucketSpec) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "data":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
			if z.Data == nil {
				z.Data = make(map[string][]byte, zb0002)
			} else if len(z.Data) > 0 {
				for key := range z.Data {
					delete(z.Data, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 []byte
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Data")
					return
				}
				za0002, bts, err = msgp.ReadBytesBytes(bts, za0002)
				if err != nil {
					err = msgp.WrapError(err, "Data", za0001)
					return
				}
				z.Data[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BucketSpec) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 5 + msgp.MapHeaderSize
	if z.Data != nil {
		for za0001, za0002 := range z.Data {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.BytesPrefixSize + len(za0002)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Providers) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "items":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Items")
				return
			}
			if z.Items == nil {
				z.Items = make(map[string]int32, zb0002)
			} else if len(z.Items) > 0 {
				for key := range z.Items {
					delete(z.Items, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 int32
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Items")
					return
				}
				za0002, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "Items", za0001)
					return
				}
				z.Items[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Providers) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "items"
	err = en.Append(0x81, 0xa5, 0x69, 0x74, 0x65, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Items)))
	if err != nil {
		err = msgp.WrapError(err, "Items")
		return
	}
	for za0001, za0002 := range z.Items {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Items")
			return
		}
		err = en.WriteInt32(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Items", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Providers) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "items"
	o = append(o, 0x81, 0xa5, 0x69, 0x74, 0x65, 0x6d, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Items)))
	for za0001, za0002 := range z.Items {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendInt32(o, za0002)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Providers) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "items":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Items")
				return
			}
			if z.Items == nil {
				z.Items = make(map[string]int32, zb0002)
			} else if len(z.Items) > 0 {
				for key := range z.Items {
					delete(z.Items, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 int32
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Items")
					return
				}
				za0002, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Items", za0001)
					return
				}
				z.Items[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Providers) Msgsize() (s int) {
	s = 1 + 6 + msgp.MapHeaderSize
	if z.Items != nil {
		for za0001, za0002 := range z.Items {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.Int32Size
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StoreContents) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "buckets":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Buckets")
				return
			}
			if cap(z.Buckets) >= int(zb0002) {
				z.Buckets = (z.Buckets)[:zb0002]
			} else {
				z.Buckets = make([]BucketSpec, zb0002)
			}
			for za0001 := range z.Buckets {
				err = z.Buckets[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Buckets", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *StoreContents) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "buckets"
	err = en.Append(0x81, 0xa7, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Buckets)))
	if err != nil {
		err = msgp.WrapError(err, "Buckets")
		return
	}
	for za0001 := range z.Buckets {
		err = z.Buckets[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Buckets", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *StoreContents) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "buckets"
	o = append(o, 0x81, 0xa7, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Buckets)))
	for za0001 := range z.Buckets {
		o, err = z.Buckets[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Buckets", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StoreContents) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "buckets":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Buckets")
				return
			}
			if cap(z.Buckets) >= int(zb0002) {
				z.Buckets = (z.Buckets)[:zb0002]
			} else {
				z.Buckets = make([]BucketSpec, zb0002)
			}
			for za0001 := range z.Buckets {
				bts, err = z.Buckets[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Buckets", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *StoreContents) Msgsize() (s int) {
	s = 1 + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Buckets {
		s += z.Buckets[za0001].Msgsize()
	}
	return
}
