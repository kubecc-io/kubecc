package metrics

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *CacheHits) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "cacheHitsTotal":
			z.CacheHitsTotal, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "CacheHitsTotal")
				return
			}
		case "cacheMissesTotal":
			z.CacheMissesTotal, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "CacheMissesTotal")
				return
			}
		case "cacheHitPercent":
			z.CacheHitPercent, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "CacheHitPercent")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z CacheHits) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "cacheHitsTotal"
	err = en.Append(0x83, 0xae, 0x63, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CacheHitsTotal)
	if err != nil {
		err = msgp.WrapError(err, "CacheHitsTotal")
		return
	}
	// write "cacheMissesTotal"
	err = en.Append(0xb0, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CacheMissesTotal)
	if err != nil {
		err = msgp.WrapError(err, "CacheMissesTotal")
		return
	}
	// write "cacheHitPercent"
	err = en.Append(0xaf, 0x63, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.CacheHitPercent)
	if err != nil {
		err = msgp.WrapError(err, "CacheHitPercent")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z CacheHits) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "cacheHitsTotal"
	o = append(o, 0x83, 0xae, 0x63, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c)
	o = msgp.AppendInt64(o, z.CacheHitsTotal)
	// string "cacheMissesTotal"
	o = append(o, 0xb0, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c)
	o = msgp.AppendInt64(o, z.CacheMissesTotal)
	// string "cacheHitPercent"
	o = append(o, 0xaf, 0x63, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74)
	o = msgp.AppendFloat64(o, z.CacheHitPercent)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CacheHits) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "cacheHitsTotal":
			z.CacheHitsTotal, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CacheHitsTotal")
				return
			}
		case "cacheMissesTotal":
			z.CacheMissesTotal, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CacheMissesTotal")
				return
			}
		case "cacheHitPercent":
			z.CacheHitPercent, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CacheHitPercent")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z CacheHits) Msgsize() (s int) {
	s = 1 + 15 + msgp.Int64Size + 17 + msgp.Int64Size + 16 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PerformanceInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "averagePutTime":
			z.AveragePutTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "AveragePutTime")
				return
			}
		case "averageGetTime":
			z.AverageGetTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "AverageGetTime")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PerformanceInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "averagePutTime"
	err = en.Append(0x82, 0xae, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.AveragePutTime)
	if err != nil {
		err = msgp.WrapError(err, "AveragePutTime")
		return
	}
	// write "averageGetTime"
	err = en.Append(0xae, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.AverageGetTime)
	if err != nil {
		err = msgp.WrapError(err, "AverageGetTime")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PerformanceInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "averagePutTime"
	o = append(o, 0x82, 0xae, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.AveragePutTime)
	// string "averageGetTime"
	o = append(o, 0xae, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.AverageGetTime)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PerformanceInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "averagePutTime":
			z.AveragePutTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AveragePutTime")
				return
			}
		case "averageGetTime":
			z.AverageGetTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AverageGetTime")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PerformanceInfo) Msgsize() (s int) {
	s = 1 + 15 + msgp.Int64Size + 15 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StorageProvider) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "kind":
			z.Kind, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Kind")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z StorageProvider) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "kind"
	err = en.Append(0x81, 0xa4, 0x6b, 0x69, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Kind)
	if err != nil {
		err = msgp.WrapError(err, "Kind")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z StorageProvider) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "kind"
	o = append(o, 0x81, 0xa4, 0x6b, 0x69, 0x6e, 0x64)
	o = msgp.AppendString(o, z.Kind)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StorageProvider) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "kind":
			z.Kind, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Kind")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z StorageProvider) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Kind)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *UsageInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "objectCount":
			z.ObjectCount, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ObjectCount")
				return
			}
		case "totalSize":
			z.TotalSize, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "TotalSize")
				return
			}
		case "usagePercent":
			z.UsagePercent, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "UsagePercent")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z UsageInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "objectCount"
	err = en.Append(0x83, 0xab, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ObjectCount)
	if err != nil {
		err = msgp.WrapError(err, "ObjectCount")
		return
	}
	// write "totalSize"
	err = en.Append(0xa9, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.TotalSize)
	if err != nil {
		err = msgp.WrapError(err, "TotalSize")
		return
	}
	// write "usagePercent"
	err = en.Append(0xac, 0x75, 0x73, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.UsagePercent)
	if err != nil {
		err = msgp.WrapError(err, "UsagePercent")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z UsageInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "objectCount"
	o = append(o, 0x83, 0xab, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt64(o, z.ObjectCount)
	// string "totalSize"
	o = append(o, 0xa9, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt64(o, z.TotalSize)
	// string "usagePercent"
	o = append(o, 0xac, 0x75, 0x73, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74)
	o = msgp.AppendFloat64(o, z.UsagePercent)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UsageInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "objectCount":
			z.ObjectCount, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ObjectCount")
				return
			}
		case "totalSize":
			z.TotalSize, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TotalSize")
				return
			}
		case "usagePercent":
			z.UsagePercent, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UsagePercent")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z UsageInfo) Msgsize() (s int) {
	s = 1 + 12 + msgp.Int64Size + 10 + msgp.Int64Size + 13 + msgp.Float64Size
	return
}
