{
	// Place your kubecc workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Function Options": {
		"scope": "go",
		"prefix": "options",
		"body": [
			"type $1Options struct {",
			"	$0",
			"}",
			"",
			"type $1Option func(*$1Options)",
			"",
			"func (o *$1Options) Apply(opts ...$1Option) {",
			"	for _, op := range opts {",
			"		op(o)",
			"	}",
			"}",
			"",
			"func With() $1Option {",
			"	return func(o *$1Options) {",
			"		// TODO",
			"	}",
			"}",
		],
		"description": "Scaffolding for function options"
	},
	"With Option": {
		"scope": "go",
		"prefix": "with",
		"body": [
			"func With() $1Option {",
			"	return func(o *$1Options) {",
			"		// TODO",
			"	}",
			"}",
		],
		"description": "Additional function option"
	},
	"New Meta Context": {
		"scope": "go",
		"prefix": "newctx",
		"body": [
			"ctx := meta.NewContext(",
			"	meta.WithProvider(identity.Component, meta.WithValue(types.$1)),",
			"	meta.WithProvider(identity.UUID),",
			"	meta.WithProvider(logkc.Logger),",
			"	meta.WithProvider(tracing.Tracer),",
			"	meta.WithProvider(host.SystemInfo),",
			")",
		]
	},
	// Testing
	"When": {
		"scope": "go",
		"prefix": "when",
		"body": [
			"When(\"$1\", func() {",
			"	$0",
			"})",
		],
	},
	"Measure": {
		"scope": "go",
		"prefix": "measure",
		"body": [
			"Measure(\"$1\", func(b Benchmarker) {",
			"	$0",
			"	b.Time(\"TODO\", func() {",
			"",
			"	})",
			"})",
		],
	},
	"It": {
		"scope": "go",
		"prefix": "it",
		"body": [
			"It(\"$1\", func() {",
			"	$0",
			"})",
		]
	},
	"Expect ... To Equal": {
		"scope": "go",
		"prefix": "ete",
		"body": "Expect($1).To(Equal($2))",
	},
	"Expect ... Not To Equal": {
		"scope": "go",
		"prefix": "ente",
		"body": "Expect($1).NotTo(Equal($2))",
	},
	"Expect ... To Receive": {
		"scope": "go",
		"prefix": "etrx",
		"body": "Expect($1).To(Receive())",
	},
	"Consistently Should Not Receive": {
		"scope": "go",
		"prefix": "csnrx",
		"body": "Consistently($1).ShouldNot(Receive())",
	},
	"Eventually Bool": {
		"scope": "go",
		"prefix": "evb",
		"body": [
			"Eventually(func() bool {",
			"	$0",
			"}).Should(BeTrue())",
		],
	},
	"Eventually Int": {
		"scope": "go",
		"prefix": "evi",
		"body": [
			"Eventually(func() int {",
			"	$1",
			"}).Should(BeEquivalentTo($2))",
		],
	},
}