syntax = "proto3";
option go_package = "pkg/types";

message Empty {}

service Consumerd {
  rpc Run(RunRequest) returns (RunResponse);
}

service Agent {
  rpc Compile(CompileRequest) returns (CompileResponse);
  rpc GetCpuConfig (Empty) returns (CpuConfig);
  rpc SetCpuConfig (CpuConfig) returns (Empty);
}

service Scheduler {
  rpc Compile(CompileRequest) returns (CompileResponse);
  rpc ConnectAgent(stream Metadata) returns (stream Empty);
  rpc ConnectConsumerd(stream Metadata) returns (stream Empty);
  rpc SystemStatus(Empty) returns (SystemStatusResponse);
}

service InternalMonitor {
  rpc Stream(stream Metric) returns (stream Empty);
}

service ExternalMonitor {
  rpc Listen(Key) returns (stream Value);
}

message Metric {
  Key Key = 1;
  Value Value = 2;
}

message Key {
  string Bucket = 1;
  string Name = 2;
}

message Value {
  bytes Data = 1;
}

message Identity {
  Component Component = 1;
  string UUID = 2;
}

message CpuConfig {
  int32 MaxRunningProcesses = 1;
  double QueuePressureThreshold = 2;
  double QueueRejectThreshold = 3;
}

message SystemStatusResponse {
  repeated ComponentStatus StatusItems = 1;
}

message ComponentStatus {
  Component Component = 1;
  bool Alive = 2;
}

message Toolchains {
  repeated Toolchain Items = 1;
}

message Metadata {
  oneof Contents {
    Toolchains Toolchains = 2;
    QueueStatus QueueStatus = 3;
  }
}

enum Component {
  Component_Unknown = 0;
  Component_Agent = 1;
  Component_Scheduler = 2;
  Component_Controller = 3;
  Component_Consumer = 4;
  Component_Consumerd = 5;
  Component_Make = 6;
  Component_Test = 7;
  Component_Dashboard = 8;
  Component_CLI = 9;
  Component_Monitor = 10;
}

enum QueueStatus {
  Available = 0;
  Queueing = 1;
  QueuePressure = 2;
  QueueFull = 3;
}

enum ToolchainKind {
  ToolchainKind_Unknown = 0;
  ToolchainKind_Gnu = 1;
  ToolchainKind_Clang = 2;
  ToolchainKind_Test = 3;
}

enum ToolchainLang {
  ToolchainLang_Unknown = 0;
  ToolchainLang_C = 1;
  ToolchainLang_CXX = 2;
  ToolchainLang_Multi = 3;
}

message Toolchain {
  ToolchainKind Kind = 1;
  ToolchainLang Lang = 2;
  string Executable = 3;
  string TargetArch = 4;
  string Version = 5;
  bool PicDefault = 6;
}

message AgentToolchainInfo {
  string Kind = 1;
  string Target = 2;
  repeated string Versions = 3; 
}

message AgentToolchainInfoList {
  repeated AgentToolchainInfo info = 1; 
}

// consumer -> consumerd
message RunRequest {
  oneof Compiler {
    string Path = 1;
    Toolchain Toolchain = 2;
  }
  repeated string Args = 3;
  uint32 UID = 4;
  uint32 GID = 5;
  string WorkDir = 6;
  repeated string Env = 7;
  bytes Stdin = 8;
}
// consumerd -> consumer
message RunResponse {
  int32 ReturnCode = 1;
  bytes Stdout = 2;
  bytes Stderr = 3;
}

// consumerd -> scheduler
message ScheduleRequest {}

// scheduler -> consumerd
message ScheduleResponse {}


message AgentInfo {
  // System Info
  string Arch = 1;

  // Downward API
  string Node = 3;
  string Pod = 4;
  string Namespace = 5;
}

// consumerd -> scheduler -> agent
message CompileRequest {
  Toolchain Toolchain = 1;
  repeated string Args = 2;
  bytes PreprocessedSource = 3;
}

// agent -> scheduler -> consumerd
message CompileResponse {
  enum Result {
    Success = 0;
    Fail = 1;
  }
  Result CompileResult = 1;
  oneof Data {
    string Error = 3;
    bytes CompiledSource = 4;
  }
}
