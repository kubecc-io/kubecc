// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/types/types_grpc.pb.go

// Package mock_types is a generated GoMock package.
package mock_types

import (
	context "context"
	reflect "reflect"

	types "github.com/cobalt77/kubecc/pkg/types"
	gomock "github.com/golang/mock/gomock"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockConsumerdClient is a mock of ConsumerdClient interface.
type MockConsumerdClient struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerdClientMockRecorder
}

// MockConsumerdClientMockRecorder is the mock recorder for MockConsumerdClient.
type MockConsumerdClientMockRecorder struct {
	mock *MockConsumerdClient
}

// NewMockConsumerdClient creates a new mock instance.
func NewMockConsumerdClient(ctrl *gomock.Controller) *MockConsumerdClient {
	mock := &MockConsumerdClient{ctrl: ctrl}
	mock.recorder = &MockConsumerdClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerdClient) EXPECT() *MockConsumerdClientMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockConsumerdClient) Run(ctx context.Context, in *types.RunRequest, opts ...grpc.CallOption) (*types.RunResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(*types.RunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockConsumerdClientMockRecorder) Run(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockConsumerdClient)(nil).Run), varargs...)
}

// MockConsumerdServer is a mock of ConsumerdServer interface.
type MockConsumerdServer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerdServerMockRecorder
}

// MockConsumerdServerMockRecorder is the mock recorder for MockConsumerdServer.
type MockConsumerdServerMockRecorder struct {
	mock *MockConsumerdServer
}

// NewMockConsumerdServer creates a new mock instance.
func NewMockConsumerdServer(ctrl *gomock.Controller) *MockConsumerdServer {
	mock := &MockConsumerdServer{ctrl: ctrl}
	mock.recorder = &MockConsumerdServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerdServer) EXPECT() *MockConsumerdServerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockConsumerdServer) Run(arg0 context.Context, arg1 *types.RunRequest) (*types.RunResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(*types.RunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockConsumerdServerMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockConsumerdServer)(nil).Run), arg0, arg1)
}

// mustEmbedUnimplementedConsumerdServer mocks base method.
func (m *MockConsumerdServer) mustEmbedUnimplementedConsumerdServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedConsumerdServer")
}

// mustEmbedUnimplementedConsumerdServer indicates an expected call of mustEmbedUnimplementedConsumerdServer.
func (mr *MockConsumerdServerMockRecorder) mustEmbedUnimplementedConsumerdServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedConsumerdServer", reflect.TypeOf((*MockConsumerdServer)(nil).mustEmbedUnimplementedConsumerdServer))
}

// MockUnsafeConsumerdServer is a mock of UnsafeConsumerdServer interface.
type MockUnsafeConsumerdServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeConsumerdServerMockRecorder
}

// MockUnsafeConsumerdServerMockRecorder is the mock recorder for MockUnsafeConsumerdServer.
type MockUnsafeConsumerdServerMockRecorder struct {
	mock *MockUnsafeConsumerdServer
}

// NewMockUnsafeConsumerdServer creates a new mock instance.
func NewMockUnsafeConsumerdServer(ctrl *gomock.Controller) *MockUnsafeConsumerdServer {
	mock := &MockUnsafeConsumerdServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeConsumerdServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeConsumerdServer) EXPECT() *MockUnsafeConsumerdServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedConsumerdServer mocks base method.
func (m *MockUnsafeConsumerdServer) mustEmbedUnimplementedConsumerdServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedConsumerdServer")
}

// mustEmbedUnimplementedConsumerdServer indicates an expected call of mustEmbedUnimplementedConsumerdServer.
func (mr *MockUnsafeConsumerdServerMockRecorder) mustEmbedUnimplementedConsumerdServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedConsumerdServer", reflect.TypeOf((*MockUnsafeConsumerdServer)(nil).mustEmbedUnimplementedConsumerdServer))
}

// MockSchedulerClient is a mock of SchedulerClient interface.
type MockSchedulerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerClientMockRecorder
}

// MockSchedulerClientMockRecorder is the mock recorder for MockSchedulerClient.
type MockSchedulerClientMockRecorder struct {
	mock *MockSchedulerClient
}

// NewMockSchedulerClient creates a new mock instance.
func NewMockSchedulerClient(ctrl *gomock.Controller) *MockSchedulerClient {
	mock := &MockSchedulerClient{ctrl: ctrl}
	mock.recorder = &MockSchedulerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerClient) EXPECT() *MockSchedulerClientMockRecorder {
	return m.recorder
}

// Compile mocks base method.
func (m *MockSchedulerClient) Compile(ctx context.Context, in *types.CompileRequest, opts ...grpc.CallOption) (*types.CompileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Compile", varargs...)
	ret0, _ := ret[0].(*types.CompileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compile indicates an expected call of Compile.
func (mr *MockSchedulerClientMockRecorder) Compile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compile", reflect.TypeOf((*MockSchedulerClient)(nil).Compile), varargs...)
}

// StreamIncomingTasks mocks base method.
func (m *MockSchedulerClient) StreamIncomingTasks(ctx context.Context, opts ...grpc.CallOption) (types.Scheduler_StreamIncomingTasksClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamIncomingTasks", varargs...)
	ret0, _ := ret[0].(types.Scheduler_StreamIncomingTasksClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamIncomingTasks indicates an expected call of StreamIncomingTasks.
func (mr *MockSchedulerClientMockRecorder) StreamIncomingTasks(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamIncomingTasks", reflect.TypeOf((*MockSchedulerClient)(nil).StreamIncomingTasks), varargs...)
}

// StreamOutgoingTasks mocks base method.
func (m *MockSchedulerClient) StreamOutgoingTasks(ctx context.Context, opts ...grpc.CallOption) (types.Scheduler_StreamOutgoingTasksClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamOutgoingTasks", varargs...)
	ret0, _ := ret[0].(types.Scheduler_StreamOutgoingTasksClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamOutgoingTasks indicates an expected call of StreamOutgoingTasks.
func (mr *MockSchedulerClientMockRecorder) StreamOutgoingTasks(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamOutgoingTasks", reflect.TypeOf((*MockSchedulerClient)(nil).StreamOutgoingTasks), varargs...)
}

// MockScheduler_StreamIncomingTasksClient is a mock of Scheduler_StreamIncomingTasksClient interface.
type MockScheduler_StreamIncomingTasksClient struct {
	ctrl     *gomock.Controller
	recorder *MockScheduler_StreamIncomingTasksClientMockRecorder
}

// MockScheduler_StreamIncomingTasksClientMockRecorder is the mock recorder for MockScheduler_StreamIncomingTasksClient.
type MockScheduler_StreamIncomingTasksClientMockRecorder struct {
	mock *MockScheduler_StreamIncomingTasksClient
}

// NewMockScheduler_StreamIncomingTasksClient creates a new mock instance.
func NewMockScheduler_StreamIncomingTasksClient(ctrl *gomock.Controller) *MockScheduler_StreamIncomingTasksClient {
	mock := &MockScheduler_StreamIncomingTasksClient{ctrl: ctrl}
	mock.recorder = &MockScheduler_StreamIncomingTasksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler_StreamIncomingTasksClient) EXPECT() *MockScheduler_StreamIncomingTasksClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockScheduler_StreamIncomingTasksClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockScheduler_StreamIncomingTasksClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockScheduler_StreamIncomingTasksClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockScheduler_StreamIncomingTasksClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockScheduler_StreamIncomingTasksClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockScheduler_StreamIncomingTasksClient)(nil).Context))
}

// Header mocks base method.
func (m *MockScheduler_StreamIncomingTasksClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockScheduler_StreamIncomingTasksClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockScheduler_StreamIncomingTasksClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockScheduler_StreamIncomingTasksClient) Recv() (*types.CompileRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*types.CompileRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockScheduler_StreamIncomingTasksClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockScheduler_StreamIncomingTasksClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockScheduler_StreamIncomingTasksClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockScheduler_StreamIncomingTasksClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockScheduler_StreamIncomingTasksClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockScheduler_StreamIncomingTasksClient) Send(arg0 *types.CompileResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockScheduler_StreamIncomingTasksClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockScheduler_StreamIncomingTasksClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockScheduler_StreamIncomingTasksClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockScheduler_StreamIncomingTasksClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockScheduler_StreamIncomingTasksClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockScheduler_StreamIncomingTasksClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockScheduler_StreamIncomingTasksClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockScheduler_StreamIncomingTasksClient)(nil).Trailer))
}

// MockScheduler_StreamOutgoingTasksClient is a mock of Scheduler_StreamOutgoingTasksClient interface.
type MockScheduler_StreamOutgoingTasksClient struct {
	ctrl     *gomock.Controller
	recorder *MockScheduler_StreamOutgoingTasksClientMockRecorder
}

// MockScheduler_StreamOutgoingTasksClientMockRecorder is the mock recorder for MockScheduler_StreamOutgoingTasksClient.
type MockScheduler_StreamOutgoingTasksClientMockRecorder struct {
	mock *MockScheduler_StreamOutgoingTasksClient
}

// NewMockScheduler_StreamOutgoingTasksClient creates a new mock instance.
func NewMockScheduler_StreamOutgoingTasksClient(ctrl *gomock.Controller) *MockScheduler_StreamOutgoingTasksClient {
	mock := &MockScheduler_StreamOutgoingTasksClient{ctrl: ctrl}
	mock.recorder = &MockScheduler_StreamOutgoingTasksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler_StreamOutgoingTasksClient) EXPECT() *MockScheduler_StreamOutgoingTasksClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockScheduler_StreamOutgoingTasksClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockScheduler_StreamOutgoingTasksClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockScheduler_StreamOutgoingTasksClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockScheduler_StreamOutgoingTasksClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockScheduler_StreamOutgoingTasksClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockScheduler_StreamOutgoingTasksClient)(nil).Context))
}

// Header mocks base method.
func (m *MockScheduler_StreamOutgoingTasksClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockScheduler_StreamOutgoingTasksClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockScheduler_StreamOutgoingTasksClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockScheduler_StreamOutgoingTasksClient) Recv() (*types.CompileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*types.CompileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockScheduler_StreamOutgoingTasksClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockScheduler_StreamOutgoingTasksClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockScheduler_StreamOutgoingTasksClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockScheduler_StreamOutgoingTasksClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockScheduler_StreamOutgoingTasksClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockScheduler_StreamOutgoingTasksClient) Send(arg0 *types.CompileRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockScheduler_StreamOutgoingTasksClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockScheduler_StreamOutgoingTasksClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockScheduler_StreamOutgoingTasksClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockScheduler_StreamOutgoingTasksClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockScheduler_StreamOutgoingTasksClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockScheduler_StreamOutgoingTasksClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockScheduler_StreamOutgoingTasksClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockScheduler_StreamOutgoingTasksClient)(nil).Trailer))
}

// MockSchedulerServer is a mock of SchedulerServer interface.
type MockSchedulerServer struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerServerMockRecorder
}

// MockSchedulerServerMockRecorder is the mock recorder for MockSchedulerServer.
type MockSchedulerServerMockRecorder struct {
	mock *MockSchedulerServer
}

// NewMockSchedulerServer creates a new mock instance.
func NewMockSchedulerServer(ctrl *gomock.Controller) *MockSchedulerServer {
	mock := &MockSchedulerServer{ctrl: ctrl}
	mock.recorder = &MockSchedulerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerServer) EXPECT() *MockSchedulerServerMockRecorder {
	return m.recorder
}

// Compile mocks base method.
func (m *MockSchedulerServer) Compile(arg0 context.Context, arg1 *types.CompileRequest) (*types.CompileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compile", arg0, arg1)
	ret0, _ := ret[0].(*types.CompileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compile indicates an expected call of Compile.
func (mr *MockSchedulerServerMockRecorder) Compile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compile", reflect.TypeOf((*MockSchedulerServer)(nil).Compile), arg0, arg1)
}

// StreamIncomingTasks mocks base method.
func (m *MockSchedulerServer) StreamIncomingTasks(arg0 types.Scheduler_StreamIncomingTasksServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamIncomingTasks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamIncomingTasks indicates an expected call of StreamIncomingTasks.
func (mr *MockSchedulerServerMockRecorder) StreamIncomingTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamIncomingTasks", reflect.TypeOf((*MockSchedulerServer)(nil).StreamIncomingTasks), arg0)
}

// StreamOutgoingTasks mocks base method.
func (m *MockSchedulerServer) StreamOutgoingTasks(arg0 types.Scheduler_StreamOutgoingTasksServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamOutgoingTasks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamOutgoingTasks indicates an expected call of StreamOutgoingTasks.
func (mr *MockSchedulerServerMockRecorder) StreamOutgoingTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamOutgoingTasks", reflect.TypeOf((*MockSchedulerServer)(nil).StreamOutgoingTasks), arg0)
}

// mustEmbedUnimplementedSchedulerServer mocks base method.
func (m *MockSchedulerServer) mustEmbedUnimplementedSchedulerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSchedulerServer")
}

// mustEmbedUnimplementedSchedulerServer indicates an expected call of mustEmbedUnimplementedSchedulerServer.
func (mr *MockSchedulerServerMockRecorder) mustEmbedUnimplementedSchedulerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSchedulerServer", reflect.TypeOf((*MockSchedulerServer)(nil).mustEmbedUnimplementedSchedulerServer))
}

// MockUnsafeSchedulerServer is a mock of UnsafeSchedulerServer interface.
type MockUnsafeSchedulerServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSchedulerServerMockRecorder
}

// MockUnsafeSchedulerServerMockRecorder is the mock recorder for MockUnsafeSchedulerServer.
type MockUnsafeSchedulerServerMockRecorder struct {
	mock *MockUnsafeSchedulerServer
}

// NewMockUnsafeSchedulerServer creates a new mock instance.
func NewMockUnsafeSchedulerServer(ctrl *gomock.Controller) *MockUnsafeSchedulerServer {
	mock := &MockUnsafeSchedulerServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSchedulerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSchedulerServer) EXPECT() *MockUnsafeSchedulerServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSchedulerServer mocks base method.
func (m *MockUnsafeSchedulerServer) mustEmbedUnimplementedSchedulerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSchedulerServer")
}

// mustEmbedUnimplementedSchedulerServer indicates an expected call of mustEmbedUnimplementedSchedulerServer.
func (mr *MockUnsafeSchedulerServerMockRecorder) mustEmbedUnimplementedSchedulerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSchedulerServer", reflect.TypeOf((*MockUnsafeSchedulerServer)(nil).mustEmbedUnimplementedSchedulerServer))
}

// MockScheduler_StreamIncomingTasksServer is a mock of Scheduler_StreamIncomingTasksServer interface.
type MockScheduler_StreamIncomingTasksServer struct {
	ctrl     *gomock.Controller
	recorder *MockScheduler_StreamIncomingTasksServerMockRecorder
}

// MockScheduler_StreamIncomingTasksServerMockRecorder is the mock recorder for MockScheduler_StreamIncomingTasksServer.
type MockScheduler_StreamIncomingTasksServerMockRecorder struct {
	mock *MockScheduler_StreamIncomingTasksServer
}

// NewMockScheduler_StreamIncomingTasksServer creates a new mock instance.
func NewMockScheduler_StreamIncomingTasksServer(ctrl *gomock.Controller) *MockScheduler_StreamIncomingTasksServer {
	mock := &MockScheduler_StreamIncomingTasksServer{ctrl: ctrl}
	mock.recorder = &MockScheduler_StreamIncomingTasksServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler_StreamIncomingTasksServer) EXPECT() *MockScheduler_StreamIncomingTasksServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockScheduler_StreamIncomingTasksServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockScheduler_StreamIncomingTasksServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockScheduler_StreamIncomingTasksServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockScheduler_StreamIncomingTasksServer) Recv() (*types.CompileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*types.CompileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockScheduler_StreamIncomingTasksServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockScheduler_StreamIncomingTasksServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockScheduler_StreamIncomingTasksServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockScheduler_StreamIncomingTasksServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockScheduler_StreamIncomingTasksServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockScheduler_StreamIncomingTasksServer) Send(arg0 *types.CompileRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockScheduler_StreamIncomingTasksServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockScheduler_StreamIncomingTasksServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockScheduler_StreamIncomingTasksServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockScheduler_StreamIncomingTasksServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockScheduler_StreamIncomingTasksServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockScheduler_StreamIncomingTasksServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockScheduler_StreamIncomingTasksServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockScheduler_StreamIncomingTasksServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockScheduler_StreamIncomingTasksServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockScheduler_StreamIncomingTasksServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockScheduler_StreamIncomingTasksServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockScheduler_StreamIncomingTasksServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockScheduler_StreamIncomingTasksServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockScheduler_StreamIncomingTasksServer)(nil).SetTrailer), arg0)
}

// MockScheduler_StreamOutgoingTasksServer is a mock of Scheduler_StreamOutgoingTasksServer interface.
type MockScheduler_StreamOutgoingTasksServer struct {
	ctrl     *gomock.Controller
	recorder *MockScheduler_StreamOutgoingTasksServerMockRecorder
}

// MockScheduler_StreamOutgoingTasksServerMockRecorder is the mock recorder for MockScheduler_StreamOutgoingTasksServer.
type MockScheduler_StreamOutgoingTasksServerMockRecorder struct {
	mock *MockScheduler_StreamOutgoingTasksServer
}

// NewMockScheduler_StreamOutgoingTasksServer creates a new mock instance.
func NewMockScheduler_StreamOutgoingTasksServer(ctrl *gomock.Controller) *MockScheduler_StreamOutgoingTasksServer {
	mock := &MockScheduler_StreamOutgoingTasksServer{ctrl: ctrl}
	mock.recorder = &MockScheduler_StreamOutgoingTasksServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler_StreamOutgoingTasksServer) EXPECT() *MockScheduler_StreamOutgoingTasksServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockScheduler_StreamOutgoingTasksServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockScheduler_StreamOutgoingTasksServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockScheduler_StreamOutgoingTasksServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockScheduler_StreamOutgoingTasksServer) Recv() (*types.CompileRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*types.CompileRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockScheduler_StreamOutgoingTasksServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockScheduler_StreamOutgoingTasksServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockScheduler_StreamOutgoingTasksServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockScheduler_StreamOutgoingTasksServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockScheduler_StreamOutgoingTasksServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockScheduler_StreamOutgoingTasksServer) Send(arg0 *types.CompileResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockScheduler_StreamOutgoingTasksServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockScheduler_StreamOutgoingTasksServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockScheduler_StreamOutgoingTasksServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockScheduler_StreamOutgoingTasksServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockScheduler_StreamOutgoingTasksServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockScheduler_StreamOutgoingTasksServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockScheduler_StreamOutgoingTasksServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockScheduler_StreamOutgoingTasksServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockScheduler_StreamOutgoingTasksServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockScheduler_StreamOutgoingTasksServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockScheduler_StreamOutgoingTasksServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockScheduler_StreamOutgoingTasksServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockScheduler_StreamOutgoingTasksServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockScheduler_StreamOutgoingTasksServer)(nil).SetTrailer), arg0)
}

// MockMonitorClient is a mock of MonitorClient interface.
type MockMonitorClient struct {
	ctrl     *gomock.Controller
	recorder *MockMonitorClientMockRecorder
}

// MockMonitorClientMockRecorder is the mock recorder for MockMonitorClient.
type MockMonitorClientMockRecorder struct {
	mock *MockMonitorClient
}

// NewMockMonitorClient creates a new mock instance.
func NewMockMonitorClient(ctrl *gomock.Controller) *MockMonitorClient {
	mock := &MockMonitorClient{ctrl: ctrl}
	mock.recorder = &MockMonitorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitorClient) EXPECT() *MockMonitorClientMockRecorder {
	return m.recorder
}

// Listen mocks base method.
func (m *MockMonitorClient) Listen(ctx context.Context, in *types.Key, opts ...grpc.CallOption) (types.Monitor_ListenClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Listen", varargs...)
	ret0, _ := ret[0].(types.Monitor_ListenClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Listen indicates an expected call of Listen.
func (mr *MockMonitorClientMockRecorder) Listen(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockMonitorClient)(nil).Listen), varargs...)
}

// Stream mocks base method.
func (m *MockMonitorClient) Stream(ctx context.Context, opts ...grpc.CallOption) (types.Monitor_StreamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stream", varargs...)
	ret0, _ := ret[0].(types.Monitor_StreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stream indicates an expected call of Stream.
func (mr *MockMonitorClientMockRecorder) Stream(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockMonitorClient)(nil).Stream), varargs...)
}

// Whois mocks base method.
func (m *MockMonitorClient) Whois(ctx context.Context, in *types.WhoisRequest, opts ...grpc.CallOption) (*types.WhoisResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Whois", varargs...)
	ret0, _ := ret[0].(*types.WhoisResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Whois indicates an expected call of Whois.
func (mr *MockMonitorClientMockRecorder) Whois(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Whois", reflect.TypeOf((*MockMonitorClient)(nil).Whois), varargs...)
}

// MockMonitor_StreamClient is a mock of Monitor_StreamClient interface.
type MockMonitor_StreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockMonitor_StreamClientMockRecorder
}

// MockMonitor_StreamClientMockRecorder is the mock recorder for MockMonitor_StreamClient.
type MockMonitor_StreamClientMockRecorder struct {
	mock *MockMonitor_StreamClient
}

// NewMockMonitor_StreamClient creates a new mock instance.
func NewMockMonitor_StreamClient(ctrl *gomock.Controller) *MockMonitor_StreamClient {
	mock := &MockMonitor_StreamClient{ctrl: ctrl}
	mock.recorder = &MockMonitor_StreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitor_StreamClient) EXPECT() *MockMonitor_StreamClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockMonitor_StreamClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockMonitor_StreamClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockMonitor_StreamClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockMonitor_StreamClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMonitor_StreamClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMonitor_StreamClient)(nil).Context))
}

// Header mocks base method.
func (m *MockMonitor_StreamClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockMonitor_StreamClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockMonitor_StreamClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockMonitor_StreamClient) Recv() (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockMonitor_StreamClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMonitor_StreamClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockMonitor_StreamClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMonitor_StreamClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMonitor_StreamClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockMonitor_StreamClient) Send(arg0 *types.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMonitor_StreamClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMonitor_StreamClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockMonitor_StreamClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMonitor_StreamClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMonitor_StreamClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockMonitor_StreamClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockMonitor_StreamClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockMonitor_StreamClient)(nil).Trailer))
}

// MockMonitor_ListenClient is a mock of Monitor_ListenClient interface.
type MockMonitor_ListenClient struct {
	ctrl     *gomock.Controller
	recorder *MockMonitor_ListenClientMockRecorder
}

// MockMonitor_ListenClientMockRecorder is the mock recorder for MockMonitor_ListenClient.
type MockMonitor_ListenClientMockRecorder struct {
	mock *MockMonitor_ListenClient
}

// NewMockMonitor_ListenClient creates a new mock instance.
func NewMockMonitor_ListenClient(ctrl *gomock.Controller) *MockMonitor_ListenClient {
	mock := &MockMonitor_ListenClient{ctrl: ctrl}
	mock.recorder = &MockMonitor_ListenClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitor_ListenClient) EXPECT() *MockMonitor_ListenClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockMonitor_ListenClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockMonitor_ListenClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockMonitor_ListenClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockMonitor_ListenClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMonitor_ListenClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMonitor_ListenClient)(nil).Context))
}

// Header mocks base method.
func (m *MockMonitor_ListenClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockMonitor_ListenClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockMonitor_ListenClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockMonitor_ListenClient) Recv() (*any.Any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*any.Any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockMonitor_ListenClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMonitor_ListenClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockMonitor_ListenClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMonitor_ListenClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMonitor_ListenClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockMonitor_ListenClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMonitor_ListenClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMonitor_ListenClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockMonitor_ListenClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockMonitor_ListenClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockMonitor_ListenClient)(nil).Trailer))
}

// MockMonitorServer is a mock of MonitorServer interface.
type MockMonitorServer struct {
	ctrl     *gomock.Controller
	recorder *MockMonitorServerMockRecorder
}

// MockMonitorServerMockRecorder is the mock recorder for MockMonitorServer.
type MockMonitorServerMockRecorder struct {
	mock *MockMonitorServer
}

// NewMockMonitorServer creates a new mock instance.
func NewMockMonitorServer(ctrl *gomock.Controller) *MockMonitorServer {
	mock := &MockMonitorServer{ctrl: ctrl}
	mock.recorder = &MockMonitorServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitorServer) EXPECT() *MockMonitorServerMockRecorder {
	return m.recorder
}

// Listen mocks base method.
func (m *MockMonitorServer) Listen(arg0 *types.Key, arg1 types.Monitor_ListenServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockMonitorServerMockRecorder) Listen(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockMonitorServer)(nil).Listen), arg0, arg1)
}

// Stream mocks base method.
func (m *MockMonitorServer) Stream(arg0 types.Monitor_StreamServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stream indicates an expected call of Stream.
func (mr *MockMonitorServerMockRecorder) Stream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockMonitorServer)(nil).Stream), arg0)
}

// Whois mocks base method.
func (m *MockMonitorServer) Whois(arg0 context.Context, arg1 *types.WhoisRequest) (*types.WhoisResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Whois", arg0, arg1)
	ret0, _ := ret[0].(*types.WhoisResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Whois indicates an expected call of Whois.
func (mr *MockMonitorServerMockRecorder) Whois(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Whois", reflect.TypeOf((*MockMonitorServer)(nil).Whois), arg0, arg1)
}

// mustEmbedUnimplementedMonitorServer mocks base method.
func (m *MockMonitorServer) mustEmbedUnimplementedMonitorServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMonitorServer")
}

// mustEmbedUnimplementedMonitorServer indicates an expected call of mustEmbedUnimplementedMonitorServer.
func (mr *MockMonitorServerMockRecorder) mustEmbedUnimplementedMonitorServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMonitorServer", reflect.TypeOf((*MockMonitorServer)(nil).mustEmbedUnimplementedMonitorServer))
}

// MockUnsafeMonitorServer is a mock of UnsafeMonitorServer interface.
type MockUnsafeMonitorServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMonitorServerMockRecorder
}

// MockUnsafeMonitorServerMockRecorder is the mock recorder for MockUnsafeMonitorServer.
type MockUnsafeMonitorServerMockRecorder struct {
	mock *MockUnsafeMonitorServer
}

// NewMockUnsafeMonitorServer creates a new mock instance.
func NewMockUnsafeMonitorServer(ctrl *gomock.Controller) *MockUnsafeMonitorServer {
	mock := &MockUnsafeMonitorServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMonitorServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMonitorServer) EXPECT() *MockUnsafeMonitorServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMonitorServer mocks base method.
func (m *MockUnsafeMonitorServer) mustEmbedUnimplementedMonitorServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMonitorServer")
}

// mustEmbedUnimplementedMonitorServer indicates an expected call of mustEmbedUnimplementedMonitorServer.
func (mr *MockUnsafeMonitorServerMockRecorder) mustEmbedUnimplementedMonitorServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMonitorServer", reflect.TypeOf((*MockUnsafeMonitorServer)(nil).mustEmbedUnimplementedMonitorServer))
}

// MockMonitor_StreamServer is a mock of Monitor_StreamServer interface.
type MockMonitor_StreamServer struct {
	ctrl     *gomock.Controller
	recorder *MockMonitor_StreamServerMockRecorder
}

// MockMonitor_StreamServerMockRecorder is the mock recorder for MockMonitor_StreamServer.
type MockMonitor_StreamServerMockRecorder struct {
	mock *MockMonitor_StreamServer
}

// NewMockMonitor_StreamServer creates a new mock instance.
func NewMockMonitor_StreamServer(ctrl *gomock.Controller) *MockMonitor_StreamServer {
	mock := &MockMonitor_StreamServer{ctrl: ctrl}
	mock.recorder = &MockMonitor_StreamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitor_StreamServer) EXPECT() *MockMonitor_StreamServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockMonitor_StreamServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMonitor_StreamServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMonitor_StreamServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockMonitor_StreamServer) Recv() (*types.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*types.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockMonitor_StreamServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMonitor_StreamServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockMonitor_StreamServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMonitor_StreamServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMonitor_StreamServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockMonitor_StreamServer) Send(arg0 *types.Empty) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMonitor_StreamServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMonitor_StreamServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockMonitor_StreamServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockMonitor_StreamServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockMonitor_StreamServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockMonitor_StreamServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMonitor_StreamServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMonitor_StreamServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockMonitor_StreamServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockMonitor_StreamServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockMonitor_StreamServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockMonitor_StreamServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockMonitor_StreamServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockMonitor_StreamServer)(nil).SetTrailer), arg0)
}

// MockMonitor_ListenServer is a mock of Monitor_ListenServer interface.
type MockMonitor_ListenServer struct {
	ctrl     *gomock.Controller
	recorder *MockMonitor_ListenServerMockRecorder
}

// MockMonitor_ListenServerMockRecorder is the mock recorder for MockMonitor_ListenServer.
type MockMonitor_ListenServerMockRecorder struct {
	mock *MockMonitor_ListenServer
}

// NewMockMonitor_ListenServer creates a new mock instance.
func NewMockMonitor_ListenServer(ctrl *gomock.Controller) *MockMonitor_ListenServer {
	mock := &MockMonitor_ListenServer{ctrl: ctrl}
	mock.recorder = &MockMonitor_ListenServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitor_ListenServer) EXPECT() *MockMonitor_ListenServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockMonitor_ListenServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMonitor_ListenServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMonitor_ListenServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockMonitor_ListenServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMonitor_ListenServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMonitor_ListenServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockMonitor_ListenServer) Send(arg0 *any.Any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMonitor_ListenServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMonitor_ListenServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockMonitor_ListenServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockMonitor_ListenServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockMonitor_ListenServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockMonitor_ListenServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMonitor_ListenServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMonitor_ListenServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockMonitor_ListenServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockMonitor_ListenServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockMonitor_ListenServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockMonitor_ListenServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockMonitor_ListenServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockMonitor_ListenServer)(nil).SetTrailer), arg0)
}

// MockCacheClient is a mock of CacheClient interface.
type MockCacheClient struct {
	ctrl     *gomock.Controller
	recorder *MockCacheClientMockRecorder
}

// MockCacheClientMockRecorder is the mock recorder for MockCacheClient.
type MockCacheClientMockRecorder struct {
	mock *MockCacheClient
}

// NewMockCacheClient creates a new mock instance.
func NewMockCacheClient(ctrl *gomock.Controller) *MockCacheClient {
	mock := &MockCacheClient{ctrl: ctrl}
	mock.recorder = &MockCacheClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheClient) EXPECT() *MockCacheClientMockRecorder {
	return m.recorder
}

// Pull mocks base method.
func (m *MockCacheClient) Pull(ctx context.Context, in *types.PullRequest, opts ...grpc.CallOption) (*types.CacheObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Pull", varargs...)
	ret0, _ := ret[0].(*types.CacheObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pull indicates an expected call of Pull.
func (mr *MockCacheClientMockRecorder) Pull(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockCacheClient)(nil).Pull), varargs...)
}

// Push mocks base method.
func (m *MockCacheClient) Push(ctx context.Context, in *types.PushRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Push", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Push indicates an expected call of Push.
func (mr *MockCacheClientMockRecorder) Push(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockCacheClient)(nil).Push), varargs...)
}

// Query mocks base method.
func (m *MockCacheClient) Query(ctx context.Context, in *types.QueryRequest, opts ...grpc.CallOption) (*types.QueryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*types.QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockCacheClientMockRecorder) Query(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockCacheClient)(nil).Query), varargs...)
}

// Sync mocks base method.
func (m *MockCacheClient) Sync(ctx context.Context, in *types.SyncRequest, opts ...grpc.CallOption) (types.Cache_SyncClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sync", varargs...)
	ret0, _ := ret[0].(types.Cache_SyncClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockCacheClientMockRecorder) Sync(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockCacheClient)(nil).Sync), varargs...)
}

// MockCache_SyncClient is a mock of Cache_SyncClient interface.
type MockCache_SyncClient struct {
	ctrl     *gomock.Controller
	recorder *MockCache_SyncClientMockRecorder
}

// MockCache_SyncClientMockRecorder is the mock recorder for MockCache_SyncClient.
type MockCache_SyncClientMockRecorder struct {
	mock *MockCache_SyncClient
}

// NewMockCache_SyncClient creates a new mock instance.
func NewMockCache_SyncClient(ctrl *gomock.Controller) *MockCache_SyncClient {
	mock := &MockCache_SyncClient{ctrl: ctrl}
	mock.recorder = &MockCache_SyncClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache_SyncClient) EXPECT() *MockCache_SyncClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockCache_SyncClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockCache_SyncClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockCache_SyncClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockCache_SyncClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCache_SyncClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCache_SyncClient)(nil).Context))
}

// Header mocks base method.
func (m *MockCache_SyncClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockCache_SyncClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockCache_SyncClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockCache_SyncClient) Recv() (*types.CacheObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*types.CacheObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockCache_SyncClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockCache_SyncClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockCache_SyncClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockCache_SyncClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCache_SyncClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockCache_SyncClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockCache_SyncClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCache_SyncClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockCache_SyncClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockCache_SyncClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockCache_SyncClient)(nil).Trailer))
}

// MockCacheServer is a mock of CacheServer interface.
type MockCacheServer struct {
	ctrl     *gomock.Controller
	recorder *MockCacheServerMockRecorder
}

// MockCacheServerMockRecorder is the mock recorder for MockCacheServer.
type MockCacheServerMockRecorder struct {
	mock *MockCacheServer
}

// NewMockCacheServer creates a new mock instance.
func NewMockCacheServer(ctrl *gomock.Controller) *MockCacheServer {
	mock := &MockCacheServer{ctrl: ctrl}
	mock.recorder = &MockCacheServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheServer) EXPECT() *MockCacheServerMockRecorder {
	return m.recorder
}

// Pull mocks base method.
func (m *MockCacheServer) Pull(arg0 context.Context, arg1 *types.PullRequest) (*types.CacheObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", arg0, arg1)
	ret0, _ := ret[0].(*types.CacheObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pull indicates an expected call of Pull.
func (mr *MockCacheServerMockRecorder) Pull(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockCacheServer)(nil).Pull), arg0, arg1)
}

// Push mocks base method.
func (m *MockCacheServer) Push(arg0 context.Context, arg1 *types.PushRequest) (*types.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Push indicates an expected call of Push.
func (mr *MockCacheServerMockRecorder) Push(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockCacheServer)(nil).Push), arg0, arg1)
}

// Query mocks base method.
func (m *MockCacheServer) Query(arg0 context.Context, arg1 *types.QueryRequest) (*types.QueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].(*types.QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockCacheServerMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockCacheServer)(nil).Query), arg0, arg1)
}

// Sync mocks base method.
func (m *MockCacheServer) Sync(arg0 *types.SyncRequest, arg1 types.Cache_SyncServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockCacheServerMockRecorder) Sync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockCacheServer)(nil).Sync), arg0, arg1)
}

// mustEmbedUnimplementedCacheServer mocks base method.
func (m *MockCacheServer) mustEmbedUnimplementedCacheServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCacheServer")
}

// mustEmbedUnimplementedCacheServer indicates an expected call of mustEmbedUnimplementedCacheServer.
func (mr *MockCacheServerMockRecorder) mustEmbedUnimplementedCacheServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCacheServer", reflect.TypeOf((*MockCacheServer)(nil).mustEmbedUnimplementedCacheServer))
}

// MockUnsafeCacheServer is a mock of UnsafeCacheServer interface.
type MockUnsafeCacheServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCacheServerMockRecorder
}

// MockUnsafeCacheServerMockRecorder is the mock recorder for MockUnsafeCacheServer.
type MockUnsafeCacheServerMockRecorder struct {
	mock *MockUnsafeCacheServer
}

// NewMockUnsafeCacheServer creates a new mock instance.
func NewMockUnsafeCacheServer(ctrl *gomock.Controller) *MockUnsafeCacheServer {
	mock := &MockUnsafeCacheServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCacheServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCacheServer) EXPECT() *MockUnsafeCacheServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCacheServer mocks base method.
func (m *MockUnsafeCacheServer) mustEmbedUnimplementedCacheServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCacheServer")
}

// mustEmbedUnimplementedCacheServer indicates an expected call of mustEmbedUnimplementedCacheServer.
func (mr *MockUnsafeCacheServerMockRecorder) mustEmbedUnimplementedCacheServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCacheServer", reflect.TypeOf((*MockUnsafeCacheServer)(nil).mustEmbedUnimplementedCacheServer))
}

// MockCache_SyncServer is a mock of Cache_SyncServer interface.
type MockCache_SyncServer struct {
	ctrl     *gomock.Controller
	recorder *MockCache_SyncServerMockRecorder
}

// MockCache_SyncServerMockRecorder is the mock recorder for MockCache_SyncServer.
type MockCache_SyncServerMockRecorder struct {
	mock *MockCache_SyncServer
}

// NewMockCache_SyncServer creates a new mock instance.
func NewMockCache_SyncServer(ctrl *gomock.Controller) *MockCache_SyncServer {
	mock := &MockCache_SyncServer{ctrl: ctrl}
	mock.recorder = &MockCache_SyncServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache_SyncServer) EXPECT() *MockCache_SyncServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockCache_SyncServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCache_SyncServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCache_SyncServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockCache_SyncServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockCache_SyncServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCache_SyncServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockCache_SyncServer) Send(arg0 *types.CacheObject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockCache_SyncServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockCache_SyncServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockCache_SyncServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockCache_SyncServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockCache_SyncServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockCache_SyncServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockCache_SyncServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCache_SyncServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockCache_SyncServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockCache_SyncServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockCache_SyncServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockCache_SyncServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockCache_SyncServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockCache_SyncServer)(nil).SetTrailer), arg0)
}
